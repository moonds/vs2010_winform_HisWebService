<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Adapter_BASE</name>
    </assembly>
    <members>
        <member name="M:WebServiceHelper.InvokeWebService(System.String,System.String,System.Object[])">
            <summary> 
            动态调用web服务 
            </summary>      
            <param name="url">WSDL服务地址</param> 
            <param name="methodname">方法名</param> 
            <param name="args">参数</param> 
            <returns></returns>      
        </member>
        <member name="M:WebServiceHelper.InvokeWebService(System.String,System.String,System.String,System.Object[])">
            <summary> 
            动态调用web服务 
            </summary> 
            <param name="url">WSDL服务地址</param> 
            <param name="classname">类名</param> 
            <param name="methodname">方法名</param> 
            <param name="args">参数</param> 
            <returns></returns> 
        </member>
        <member name="T:SqlHelper">
             <summary>
            SqlHelper 的摘要说明
             </summary>
        </member>
        <member name="M:SqlHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:SqlHelper.connectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            将SqlParameters参数数组（参数值）分配给SqlCommand命令
            这个方法将给任何一个参数分配DBNull.Value
            该操作将阻止默认值的使用（大爷的，没看懂）
            </summary>
            <param name="command">要分配SqlParameters参数的SqlCommand命令</param>
            <param name="commandParameters">SqlParameters参数数组</param>
        </member>
        <member name="M:SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            将DataRow类型的列值分配到SqlParameter参数数组
            </summary>
            <param name="commandParameters">要分配的SqlParameter参数数组</param>
            <param name="dataRow">将要分配给存储过程参数的DataRow</param>
        </member>
        <member name="M:SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            将一个对象数组分配给SqlParameter参数数组.（重载方法）
            </summary>
            <param name="commandParameters">要分配的SqlParameter参数数组</param>
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param>
        </member>
        <member name="M:SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            预处理用户提供的命令,数据库连接/事务/命令类型/参数
            </summary>
            <param name="command">要处理的SqlCommand</param>
            <param name="connection">有效的数据库连接</param>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名或都T-SQL命令文本</param>
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param>
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,类型的SqlCommand.
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定连接字符串,类型的SqlCommand.如果没有提供参数,不返回结果
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">SqlParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            执行指定连接字符串的存储过程,将对象数组的值赋给存储过程参数.
            此方法需要在参数缓存方法中探索参数并生成参数.
            </summary>
            <remarks>
            这个方法没有提供访问输出参数和返回值.
            示例:  
            int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配到存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令. 
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
            int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行带事务的SqlCommand. 
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">一个有效的事物</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行带事务的SqlCommand(指定参数).
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的数据库事物</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行带事务的SqlCommand(指定参数值).
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
            int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamters参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例:  
            DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet. 
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.: 
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例: 
            DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例: 
            DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.: 
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],SqlHelper.SqlConnectionOwnership)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            如果是SqlHelper打开连接,当连接关闭DataReader也将关闭.
            如果是调用都打开连接,DataReader由调用都管理.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的事务,或者为 'null'</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param>
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由SqlHelper提供</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例: 
            SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: 
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组(new SqlParameter("@prodid", 24))</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            示例: 
            SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: 
            SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">T存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            示例: 
            SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: 
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称 using "FOR XML AUTO"</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例: 
            FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)</param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数.
            </summary>
            <remarks>
            示例: 
            FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">分配给命令的SqlParamter参数数组</param>
            <param name="tableNames">要填充结果集的DataSet实例</param>
            <param name="commandParameters">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>   
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例: 
            FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>   
        </member>
        <member name="M:SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例: 
            FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例: 
            FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例: 
            FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters.
            </summary>
            <remarks>
            示例: 
            FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            执行数据集更新到数据库,指定inserted, updated, or deleted命令.
            </summary>
            <remarks>
            示例: 
            UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param>
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param>
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param>
            <param name="dataSet">要更新到数据库的DataSet</param>
            <param name="tableName">要更新到数据库的DataTable</param>
        </member>
        <member name="M:SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            创建SqlCommand命令,指定数据库连接对象,存储过程名和参数.
            </summary>
            <remarks>
            示例: 
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="sourceColumns">源表的列名称数组</param>
            <returns>返回SqlCommand命令</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="T:SqlHelper.SqlConnectionOwnership">
            <summary>
            枚举,标识数据库连接是由SqlHelper提供还是由调用者提供
            </summary>
        </member>
        <member name="F:SqlHelper.SqlConnectionOwnership.Internal">
            <summary>由SqlHelper提供连接</summary>
        </member>
        <member name="F:SqlHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary>
        </member>
        <member name="M:Extensions.DataCellToString(System.Object)">
            <summary>
            数据库类型转C#类型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.DataCellToInt(System.Object)">
            <summary>
            数据库类型转C#类型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.ChangeType(System.Object,System.Type)">
            <summary>
            Convert.ChangeType的替代品
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager">
            <summary>
            自定义接口管理器
            </summary>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.BasePage">
            <summary>
            适配器基类
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.GetAppConfiguration">
            <summary>
            获取应用程序配置
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.GetSystemParamsDictionary(System.String)">
            <summary>
            GetSystemParamsDictionary
            </summary>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="F:InspurSelfService.BankHospitalFramework.Adapter.BasePage.Log">
            <summary>
            日志操作类
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.GetReturnValueByXmlValue(System.Type,System.String)">
            <summary>
            根据XML值生成返回值
            </summary>
            <param name="type"></param>
            <param name="xmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.ReadFile(System.String)">
            <summary>
            读取凭条样式文件
            </summary>
            <param name="strPath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.FormatIpMethod(System.String,System.String,System.Reflection.MethodBase)">
            <summary>
            格式化IP和方法
            </summary>
            <param name="adapterTrace"></param>
            <param name="terminalIp"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.TypeFormat(System.String,System.Type)">
            <summary>
            将字符串格式化成指定的数据类型
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.GetTypeByTypeStr(System.String)">
            <summary>
            根据字符串数据类型获取数据类型
            </summary>
            <param name="typeStr"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.ConvertSimpleType(System.Object,System.Type)">
            <summary>
            类型转换
            </summary>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.ConvertXMLToDataSet(System.String)">
            <summary>
            将xml对象内容字符串转换为DataSet
            </summary>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.ReplaceSpecialCharactersOfXml(System.String)">
            <summary>
            XML中特殊字符处理，防止在DataSet.ReadXML时报错     -lulh 20150915
            </summary>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.ReplaceLowOrderASCIICharacters(System.String)">
            <summary>
            处理方法：在产生xml文件的时候，过滤低位非打印字符
            </summary>
            <param name="tmp"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.ConvertDictionaryToDataTable(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            二维字典转数据表
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.ColumnConvert(System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            列名称转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BasePage.Adapter_Error(System.Exception)">
            <summary>
            错误处理机制
            </summary>
            <param name="send"></param>
            <param name="e"></param>
        </member>
        <member name="P:InspurSelfService.BankHospitalFramework.Adapter.BasePage.AdapterTrace">
            <summary>
            AdapterTrace--适配流水号
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.HisTrade(System.String,System.String@,log4net.ILog,System.String,System.Reflection.MethodBase,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            HisTrade
            </summary>
            <param name="adapterTrace">适配流水号</param>
            <param name="resultCodeMsg">返回消息</param>
            <param name="log">日志对象</param>
            <param name="terminalIp">终端IP</param>
            <param name="method">方法名</param>
            <param name="systemParams">HSS参数键值对</param>
            <param name="customParams">his参数键值对</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.WSDL(System.String,log4net.ILog,System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String@,System.Boolean@,System.Object@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            //如下方式服务接口调用：http://221.199.145.82:8081/self/service/his?wsdl
            </summary>
            <param name="adapterTrace"></param>
            <param name="log"></param>
            <param name="xmldoc"></param>
            <param name="methodName"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <param name="callMethodName"></param>
            <param name="logFlag"></param>
            <param name="inParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.ASMX(System.String,log4net.ILog,System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String@,System.Boolean@,System.Object@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            //如下方式服务接口调用：http://localhost:1200/Service1.asmx
            </summary>
            <param name="adapterTrace"></param>
            <param name="log"></param>
            <param name="xmldoc"></param>
            <param name="methodName"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <param name="callMethodName"></param>
            <param name="logFlag"></param>
            <param name="inParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.Oracle(System.String,log4net.ILog,System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Oracle方式(存储过程方式)
            </summary>
            <param name="adapterTrace"></param>
            <param name="log"></param>
            <param name="xmldoc"></param>
            <param name="methodName"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <param name="callMethodName"></param>
            <param name="logFlag"></param>
            <param name="inParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.Oracle_SQL(System.String,System.String,System.String,System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Oracle方式(SQL方式返回DataSet)
            </summary>
            <param name="TabName"></param>
            <param name="Field"></param>
            <param name="Where"></param>
            <param name="xmldoc"></param>
            <param name="methodName"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <param name="callMethodName"></param>
            <param name="logFlag"></param>
            <param name="paramsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.SQLServer(System.String,log4net.ILog,System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            SQLServer方式(存储过程方式)
            </summary>
            <param name="adapterTrace"></param>
            <param name="log"></param>
            <param name="xmldoc"></param>
            <param name="methodName"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <param name="callMethodName"></param>
            <param name="logFlag"></param>
            <param name="inParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.SQLServer_SQL(System.String,System.String,System.String,System.String,log4net.ILog,System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            SQLServer方式(查询方式)
            </summary>
            <param name="adapterTrace"></param>
            <param name="log"></param>
            <param name="xmldoc"></param>
            <param name="methodName"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <param name="callMethodName"></param>
            <param name="logFlag"></param>
            <param name="inParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.Json(System.String,log4net.ILog,System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Json方式
            </summary>
            <param name="adapterTrace"></param>
            <param name="log"></param>
            <param name="xmldoc"></param>
            <param name="methodName"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <param name="callMethodName"></param>
            <param name="logFlag"></param>
            <param name="inParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.CreateInXml(System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            组织输入数据方式
            </summary>
            <param name="xmldoc">Xml文档</param>
            <param name="methodName">适配器方法名称</param>
            <param name="systemParams">WebUI传入参数集合</param>
            <param name="customParams">Adapter中自定义参数集合</param>
            <param name="callMethodName">【输出参数】：返回在Adapter.XXX.xml文件中对应的被调用方法名称</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.CreateParamsDictionary(System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            组织参数成参数字典
            </summary>
            <param name="xmldoc">Xml文档</param>
            <param name="methodName">适配器方法名称</param>
            <param name="systemParams">WebUI传入参数集合</param>
            <param name="customParams">Adapter中自定义参数集合</param>
            <param name="callMethodName">【输出参数】：返回在Adapter.XXX.xml文件中对应的被调用方法名称</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.AnalyzeOutXmlToDictionary(System.String,System.String)">
            <summary>
            解析输出的报文【字典方式输出】
            </summary>
            <param name="outXml">需要解析的报文</param>
            <param name="root">根节点值</param>
            <returns>返回的各节点值</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.XMLHisResult(System.String,System.Object,System.Object,System.String@,log4net.ILog,System.String)">
            <summary>
            XMLHisResult
            </summary>
            <param name="adapterTrace"></param>
            <param name="retVal"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="tradeCodeMsg"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCustomInterfaceManager.OutParamsHisResult(System.String,System.Object,System.Object,System.String@,log4net.ILog,System.String)">
            <summary>
            OutParamsHisResult
            </summary>
            <param name="adapterTrace"></param>
            <param name="retVal"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="tradeCodeMsg"></param>
            <returns></returns>
        </member>
        <member name="T:OracleHelperParameterCache">
             <summary>
            SqlHelperParameterCache 的摘要说明
             </summary>
        </member>
        <member name="M:OracleHelperParameterCache.DiscoverSpParameterSet(Oracle.DataAccess.Client.OracleConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid OracleConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:OracleHelperParameterCache.CloneParameters(Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            Deep copy of cached OracleParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:OracleHelperParameterCache.CacheParameterSet(System.String,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a OracleConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:OracleHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a OracleConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:OracleHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OracleConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OracleHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OracleConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OracleHelperParameterCache.GetSpParameterSet(Oracle.DataAccess.Client.OracleConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OracleConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OracleHelperParameterCache.GetSpParameterSet(Oracle.DataAccess.Client.OracleConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OracleConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OracleHelperParameterCache.GetSpParameterSetInternal(Oracle.DataAccess.Client.OracleConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid OracleConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:HisJsonHelper.GetTableByHisJsonText(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            根据His提供jsonText转换DataTable
            </summary>
            <param name="jsonText">输入参数：json文本</param>
            <param name="Result">输出参数</param>
            <param name="ErrorMsg">输出参数</param>
            <param name="CRC32">输出参数</param>
            <param name="DateTime">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:HisJsonHelper.GetTableByHisJsonText(System.String,System.String)">
            <summary>
            根据His提供jsonText转换DataTable
            </summary>
            <param name="jsonText">输入参数：json文本</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.BankCallCustomInterfaceManager">
            <summary>
            自定义接口管理器
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BankCallCustomInterfaceManager.BankCallTrade(System.String,System.String@,log4net.ILog,System.String,System.Reflection.MethodBase,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            BankCallTrade
            </summary>
            <param name="adapterTrace"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="terminalIp"></param>
            <param name="method"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BankCallCustomInterfaceManager.BankCallResult(System.String,System.Object,System.String@,log4net.ILog,System.String)">
            <summary>
            BankCallResult
            </summary>
            <param name="adapterTrace"></param>
            <param name="retVal"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="tradeCodeMsg"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BankCallCustomInterfaceManager.CreateInXml(System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@)">
            <summary>
            组织输入报文【需要根据接口规范自定义】
            </summary>
            <param name="xmldoc">Xml文档</param>
            <param name="methodName">适配器方法名称</param>
            <param name="systemParams">WebUI传入参数集合</param>
            <param name="customParams">Adapter中自定义参数集合</param>
            <param name="callMethodName">【输出参数】：返回在Adapter.XXX.xml文件中对应的被调用方法名称</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BankCallCustomInterfaceManager.AnalyzeOutXmlToDictionary(System.String,System.String)">
            <summary>
            解析输出的报文【字典方式输出】
            </summary>
            <param name="outXml">需要解析的报文</param>
            <param name="root">根节点值</param>
            <returns>返回的各节点值</returns>
        </member>
        <member name="T:CustomConfigurationManager">
            <summary>
            自定义程序集配置管理类
            </summary>
        </member>
        <member name="M:CustomConfigurationManager.GetConfigFileFullPath">
            <summary>
            获取当前程序集配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="P:CustomConfigurationManager.ConnectionStrings">
            <summary>
            获取当前程序集ConnectionStrings配置
            </summary>
        </member>
        <member name="P:CustomConfigurationManager.AppSettings">
            <summary>
            获取当前程序集AppSettings配置
            </summary>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss">
            <summary>
            银医系统后台标准交易
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertPatientMIToHss(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y000  添加病人信息至Hss数据库病人主索引信息表
            </summary>
            <param name="patientId">病人主索引Id</param>
            <param name="patientName">病人姓名</param>
            <param name="birthDate">出生日期</param>
            <param name="sex">性别（取值：1男、2女、9未知）</param>
            <param name="socialNo">身份证号</param>
            <param name="homeStreet">住址</param>
            <param name="relationTel">联系电话</param>
            <param name="micNo">医保号</param>
            <returns>信息添加成功返回影响行数，失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.ExistPatientIdByPatientId(System.String)">
            <summary>
            Y001  通过病人主索引Id判断Hss数据库中病人主索引信息是否存在
            </summary>
            <param name="patientId">病人主索引Id</param>
            <returns>查询数据库失败返回null，病人信息存在返回true，否则返回false</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdatePatientMI(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y002  修改Hss数据库中病人主索引信息
            </summary>
            <param name="patientId">病人主索引Id</param>
            <param name="patientName">病人姓名</param>
            <param name="birthDate">出生日期</param>
            <param name="sex">性别（取值：1男、2女、9未知）</param>
            <param name="socialNo">身份证号</param>
            <param name="homeStreet">住址</param>
            <param name="relationTel">联系电话</param>
            <param name="micNo">医保号</param>
            <returns>信息添加成功返回影响行数，失败返回null</returns>        
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.ExistPatientBySocialCardNo(System.String)">
            <summary>
            Y003  根据身份证号判断病人主索引信息是否注册
            </summary>
            <param name="socialNo">身份证号</param>
            <returns>查询数据库失败返回null，病人信息存在返回true，否则返回false</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.ExistPatientCardId(System.String)">
            <summary>
            Y004  判断病人就诊卡信息是否存在
            </summary>
            <param name="patientCardId">病人就诊卡号</param>
            <returns>查询数据库失败返回null，病人信息存在返回true，否则返回false</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertPatientCard(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y005  写入一条病人就诊卡信息（发卡时调用）
            </summary>
            <param name="patientCardId">病人就诊卡号</param>
            <param name="patientName">病人姓名</param>
            <param name="birthDate">出生日期</param>
            <param name="sex">性别（取值：1男、2女、9未知）</param>
            <param name="socialNo">身份证号</param>
            <param name="homeStreet">住址</param>
            <param name="relationTel">联系电话</param>
            <returns>信息添加成功返回影响行数，失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.DeletePatientCard(System.String)">
            <summary>
            Y006  删除一条病人就诊卡信息
            </summary>
            <param name="patientCardId">病人就诊卡号</param>
            <returns>信息添加成功返回影响行数，失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdatePatientCard(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y007  更新一条就诊卡信息
            </summary>
            <param name="patientCardId">病人就诊卡号</param>
            <param name="patientName">病人姓名</param>
            <param name="birthDate">出生日期</param>
            <param name="sex">性别（取值：1男、2女、9未知）</param>
            <param name="socialNo">身份证号</param>
            <param name="homeStreet">住址</param>
            <param name="relationTel">联系电话</param>
            <returns>信息添加成功返回影响行数，失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.SelectPatientCard(System.String)">
            <summary>
            Y008  根据病人就诊卡号查询病人就诊信息
            </summary>
            <param name="patientCardId">病人就诊卡号</param>
            <returns>信息查询成功返回datatable对象，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertFillMoneyDetail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y009  写入一条充值信息到银医
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="fillTypeId">充值类型（1现金，2,银行卡）</param>
            <param name="jinE">金额</param>
            <param name="fillDate">充值日期</param>
            <param name="bankCardNo">银行卡号（现金充值时为””）</param>
            <param name="transactionTypeId">交易类型(1充值，2退款)</param>
            <returns>信息添加成功返回1，失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetPatientCardDetailCheckHss(System.String,System.String)">
            <summary>
            Y010  获取就诊卡日期范围交易列表
            </summary>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns>就诊卡号，充值类型(现金，银行卡)，交易金额，交易日期</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetPatientName(System.String)">
            <summary>
            Y011  根据就诊卡号获取病人姓名
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <returns>信息查询成功返回病人姓名，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.ExecutePatientReturnFeeHss(System.String,System.String,System.String)">
            <summary>
            Y012**未实现**执行病人费用退款(银行卡、医保卡)
            </summary>
            <param name="patientCardId">病人就诊卡号</param>
            <param name="returnFeeType">退费类型(1,银行卡，2.医保卡)</param>
            <param name="jinE">退款金额</param>
            <returns>信息添加成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertBankCardBinding(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y013  插入一条就诊卡银行卡绑定信息
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="bankCardNo">银行卡号</param>
            <param name="bankId">银行Id</param>
            <param name="inputDate">插入日期</param>
            <param name="bindingstate">绑定状态(1.绑定，0.取消绑定)</param>
            <returns>信息添加成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.BindingBankCard(System.String,System.String)">
            <summary>
            Y014 绑定就诊卡银行卡
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="bankCardNo">银行卡号</param>
            <returns>操作执行成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UnBindingBankCard(System.String,System.String)">
            <summary>
            Y015  就诊卡银行卡解绑定
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="bankCardNo">银行卡号</param>
            <returns>操作执行成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.JieBindingBankCardById(System.String)">
            <summary>
            Y016**遗弃方法**根据绑定记录Id号解绑定
            </summary>
            <param name="id">绑定记录Id号</param>
            <returns>操作执行成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.ExistBindingBankCard(System.String,System.String)">
            <summary>
            Y017  就诊卡银行卡绑定是否存在
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="bankCardNo">银行卡号</param>
            <returns>查询数据库失败返回null，信息存在返回true，否则返回false</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetBindingState(System.String,System.String)">
            <summary>
            Y018  获取就诊卡银行卡绑定状态
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="bankCardNo">银行卡号</param>
            <returns>信息查询失败返回null，未绑定返回0，绑定返回1</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetBindingRecordByPatientIdBindingState(System.String,System.String)">
            <summary>
            Y019  根据就诊卡号和状态获取绑定记录
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="bindingState">绑定状态(1.已绑定，0.未绑定)</param>
            <returns>信息查询成功返回datatable对象，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetBindingRecordByPatientId(System.String)">
             <summary>
            Y020  获取就诊卡绑定银行卡记录
             </summary>
             <param name="patientCardId">就诊卡号</param>
             <returns>信息查询成功返回datatable对象，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UnBindingBankCardById(System.String)">
            <summary>
            Y021  根据记录Id解绑定就诊卡
            </summary>
            <param name="id">绑定记录Id</param>
            <returns>操作执行成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.BindingBankCardById(System.String,System.String)">
            <summary>
            Y022  根据记录Id绑定就诊卡
            </summary>
            <param name="id">绑定记录Id</param>
            <returns>操作执行成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertMICPatientCardBinding(System.String,System.String)">
            <summary>
            Y023  插入一条就诊卡医保卡绑定信息
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="micNo">医保卡号</param>
            <returns>操作执行成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetMedicalInsuranceCardNoByPid(System.String)">
            <summary>
            Y024  根据就诊号获取医保卡号
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <returns>操作成功返回医保卡号，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetPatientCardIdByMiNo(System.String)">
            <summary>
            Y025  根据医保卡号获取就诊号
            </summary>
            <param name="micNo">医保卡号</param>
            <returns>操作成功返回就诊卡号，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetPatientCardIdByBankCardNo(System.String)">
            <summary>
            Y026  根据银行卡号获取就诊卡号
            </summary>
            <param name="bankCardNo">银行卡号</param>
            <returns>操作成功返回就诊卡号，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetTerninalSubDeviceStartConfigByDevNo(System.String)">
            <summary>
            Y027  根据终端号获取终端子设备配置串
            </summary>
            <param name="terminalNo">终端号</param>
            <returns>操作成功返回终端子设备配置串，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetTerminalNoByIp(System.String)">
            <summary>
            Y028  根据Ip获取终端号
            </summary>
            <param name="terminalIp">终端Ip</param>
            <returns>操作成功返回终端号，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetCurrentInvoiceNo(System.String)">
            <summary>
            Y029  根据终端号获取当前发票号
            </summary>
            <param name="terminalNo">终端号</param>
            <returns>操作成功返回终端当前发票号，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.AddInvoiceNo(System.String)">
            <summary>
            Y030  发票号增1，已打发票记入明细
            </summary>
            <param name="terminalNo">终端号</param>
            <returns>操作成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdateDeviceState(System.String,System.String,System.String)">
            <summary>
            Y031  更新记录设备当前状态
            </summary>
            <param name="terminalNo">终端号</param>
            <param name="deviceStateStr">监控获取的设备串</param>
            <param name="dateTime">记录时间</param>
            <returns>操作成功返回首行首列，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.CashBoxDetailInsert(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y032  记录钞箱增加放入一张纸币
            </summary>
            <param name="terminalNo">终端号</param>
            <param name="mianZhi">面值</param>
            <param name="zhangShu">张数</param>
            <param name="patientCardId">就诊卡号</param>
            <param name="idCardNo">身份证号或空字符串</param>
            <param name="startDate">写入日期</param>
            <param name="moneyCode">币种</param>
            <param name="maxZhangshu">最大满箱张数</param>
            <returns>操作成功返回首行首列，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.CardStockDetailInsert(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Y033  插入发卡明细
            </summary>
            <param name="terminalNo">终端号</param>
            <param name="addCardAmount">加卡或发卡量 ，加卡为正值，发卡为负值</param>
            <param name="patientCardId">就诊卡号，加卡时为“”</param>
            <param name="idCardNo">身份证号，加卡时为“”</param>
            <param name="inputDate">写入日期</param>
            <param name="userId">加卡时为管理用户Id，发卡时为“”</param>
            <param name="description">描述</param>
            <param name="maxCardStockZhangShu">最大容量张数</param>
            <returns>操作成功返回首行首列，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.CardStockGetState(System.String,System.String)">
            <summary>
            Y034  获取发卡机状态（判断发卡机卡箱是否已满）该存储过程并不是获取卡机状态
            </summary>
            <param name="terminalNo">终端号</param>
            <param name="maxZhangShu">最大容量张数</param>
            <returns>操作成功返回值：0.正常，1卡箱满，2.卡箱空，3.异常；失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.CashBoxGetState0(System.String,System.String)">
            <summary>
            Y035  获取当前钞箱状态
            </summary>
            <param name="terminalNo">终端号</param>
            <param name="maxZhangShu">最大容量张数</param>
            <returns>操作成功返回值：0.正常，1卡箱满，2.卡箱空，3.异常；失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertLogTrade(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入交易报文明细
            </summary>
            <param name="TradeDetailID"></param>
            <param name="TradeTime"></param>
            <param name="TradeCode"></param>
            <param name="TradeName"></param>
            <param name="TradeMsg"></param>
            <param name="MsgType"></param>
            <param name="LogType"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertTradeDetail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入交易明细
            </summary>
            <param name="InterfaceTypeID"></param>
            <param name="InterfaceNameID"></param>
            <param name="TradeTime"></param>
            <param name="TraceNo"></param>
            <param name="TerminalNo"></param>
            <param name="TradeState"></param>
            <param name="ActivityID"></param>
            <param name="CurrentMoney"></param>
            <param name="TradeMoney"></param>
            <param name="TradeID"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetHospitalIntroduction(System.String)">
            <summary>
            获取医院简介信息
            </summary>
            <returns>返回值：DataTable对象.成功、null.失败</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.GetPatientCardTransactionDetail(System.String,System.String,System.String)">
            <summary>
            Y039  查询就诊卡交易信息
            </summary>
            <param name="patientCardId">病人就诊卡号</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns>查询成功返回datatable（就诊卡号，姓名，充值类型(1.现金，2.银行卡，3.就诊卡)，交易类型(1.终端充值，2.终端退款，3.终端扣款)，金额，交易日期，备注），失败返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.InsertChongZheng(System.String,System.String,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Y044  写一条待冲正信息到Hss
            </summary>
            <param name="TransCode">交易码</param>
            <param name="Message">交易报文</param>
            <param name="ResultFlag">冲正标志</param>
            <param name="ExecuteDate">执行时间</param>
            <param name="Count">冲正次数</param>
            <returns>信息添加成功返回影响行数，否则返回null</returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdatePatientCardDetail_hisTrace(System.String,System.String,System.String,System.String)">
            <summary>
            根据银医流水号、流水号和交易时间更新医院返回的流水号
            </summary>
            <param name="patientCardId">就诊卡号</param>
            <param name="terminalIp">终端ip</param>
            <param name="trace">银医流水号</param>
            <param name="hisTrace">his流水号</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdateTradeInfo(System.String,System.String)">
            <summary>
            更新交易信息
            </summary>
            <param name="TradeState"></param>
            <param name="CurrentMoney"></param>
            <param name="TradeTime"></param>
            <param name="TradeMoney"></param>
            <param name="TradeID"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdateTradeDetails(System.String,System.String)">
            <summary>
            更新交易明细信息
            </summary>
            <param name="TradeState"></param>
            <param name="CurrentMoney"></param>
            <param name="TradeTime"></param>
            <param name="TradeMoney"></param>
            <param name="TradeID"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdateTradeInfoWithMoney(System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.UpdateTradeDetailsWithMoney(System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHss.IsFirstGetPatientInfo(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:JsonHelper.GetJsonStringByObject(System.Object)">
            <summary>
            Object对象转为Json格式字符串
            add by Vincent.Q 11.01.12
            </summary>
            <param name="aobj_data"></param>
            <returns></returns>
        </member>
        <member name="M:JsonHelper.GetJsonStringByDataTable(System.Data.DataTable)">
            <summary>
            DataTable对象转为Json格式字符串
            add by Vincent.Q 11.01.12
            </summary>
            <param name="atable_data"></param>
            <returns></returns>
        </member>
        <member name="M:JsonHelper.GetJsonStringByDataTable(System.Data.DataTable,System.String)">
            <summary>
            DataTable对象转为Json格式字符串
            add by Vincent.Q 11.01.12
            </summary>
            <param name="atable_data"></param>
            <param name="as_tablename"></param>
            <returns></returns>
        </member>
        <member name="M:JsonHelper.GetObjectByJsonString(System.String)">
            <summary>
            Json格式字符串转为Object对象
            add by Vincent.Q 11.01.12
            </summary>
            <param name="as_jsonstring"></param>
            <returns></returns>
        </member>
        <member name="M:JsonHelper.GetObjectByJsonString(System.String,System.Type)">
            <summary>
            Json格式字符串转为Object对象
            add by Vincent.Q 11.01.12
            </summary>
            <param name="as_jsonstring"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:JsonHelper.GetEntityByJsonString(System.String,BaseEntity)">
            <summary>
            Json格式字符串转为Entity对象
            add by Vincent.Q 11.01.12
            </summary>
            <param name="as_jsonstring"></param>
            <param name="aentity"></param>
            <returns></returns>
        </member>
        <member name="M:JsonHelper.GetTableByJsonString(System.String)">
            <summary>
            Json格式字符串转为DataTable对象
            add by Vincent.Q 11.01.12
            </summary>
            <param name="as_jsonstring"></param>
            <returns></returns>
        </member>
        <member name="M:JsonHelper.GetTableByJsonString(System.String,System.String)">
            <summary>
            Json格式字符串转为DataTable对象
            add by Vincent.Q 11.01.12
            </summary>
            <param name="as_jsonstring"></param>
            <param name="as_tablename"></param>
            <returns></returns>
        </member>
        <member name="M:LogUtility.WritePageErrorLog(System.String)">
            <summary>
            写日志
            </summary>
            <param name="log">日志</param>
            <returns></returns>
        </member>
        <member name="M:LogUtility.WriteLogFile(System.String,System.String,System.String,System.String)">
            <summary>
            写入日志文件
            </summary>
            <param name="input">文件内容</param>
            <param name="folder">文件夹</param>
            <param name="yearMonth">【子文件夹名】</param>
            <param name="file">文件名【日志文件】</param>
        </member>
        <member name="M:LogUtility.HisLogError(log4net.ILog,System.String,System.String)">
            <summary>
            HIS错误日志
            </summary>
            <param name="log"></param>
            <param name="strErrorMessage"></param>
            <param name="terminalIp"></param>
        </member>
        <member name="M:LogUtility.HisLogInfo(log4net.ILog,System.String,System.String)">
            <summary>
            HIS交易日志
            </summary>
            <param name="log"></param>
            <param name="strErrorMessage"></param>
            <param name="terminalIp"></param>
        </member>
        <member name="M:LogUtility.BankLogError(log4net.ILog,System.String,System.String)">
            <summary>
            银行错误日志
            </summary>
            <param name="log"></param>
            <param name="strErrorMessage"></param>
            <param name="terminalIp"></param>
        </member>
        <member name="M:LogUtility.BankLogInfo(log4net.ILog,System.String,System.String)">
            <summary>
            银行交易日志
            </summary>
            <param name="log"></param>
            <param name="strErrorMessage"></param>
            <param name="terminalIp"></param>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteSelectDataTable(System.String)">
            <summary>
            获得单张表
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteSelectDataSet(System.String)">
            <summary>
            获得多张表
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteSelect(System.String)">
            <summary>
            获得第一行第一列
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteSelect``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            获得第一行第一列
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteStoreProcedureDataSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程获得多张表
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteStoreProcedureString(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行存储过程获得第一行第一列
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteStoreProcedureInsert(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行插入返回行数
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteUpdate(System.String)">
            <summary>
            更新行
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteInsert(System.String)">
            <summary>
            插入行
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteInsertIdentity(System.String)">
            <summary>
            插入带有自增列行并获得新的自增编号
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteSelect(System.String,System.Data.Common.DbParameter[])">
            <summary>
            通过dataReader获得表
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Common.DatabaseAccess.ExecuteSelectTables(System.String)">
            <summary>
            获得多个DataTable
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:WebServiceProxy">
            <summary>
            WebServiceProxy 的摘要说明
            </summary>
        </member>
        <member name="F:WebServiceProxy._wsdlUrl">
            <summary>					
            web服务地址							
            </summary>							
        </member>
        <member name="F:WebServiceProxy._wsdlName">
            <summary>					
            web服务名称							
            </summary>							
        </member>
        <member name="F:WebServiceProxy._wsdlNamespace">
            <summary>					
            代理类命名空间							
            </summary>							
        </member>
        <member name="F:WebServiceProxy._typeName">
            <summary>					
            代理类类型名称							
            </summary>							
        </member>
        <member name="F:WebServiceProxy._assName">
            <summary>					
            程序集名称							
            </summary>							
        </member>
        <member name="F:WebServiceProxy._assPath">
            <summary>					
            代理类所在程序集路径							
            </summary>							
        </member>
        <member name="F:WebServiceProxy._instance">
            <summary>					
            代理类的实例							
            </summary>							
        </member>
        <member name="M:WebServiceProxy.CreateServiceAssembly">
            <summary>							
            得到WSDL信息，生成本地代理类并编译为DLL							
            </summary>							
        </member>
        <member name="M:WebServiceProxy.ExecuteQuery(System.String,System.Object[])">
            <summary>							
            执行代理类指定方法，有返回值								
            </summary>								
            <param	name="methodName">方法名称</param>							
            <param	name="param">参数</param>							
            <returns>object</returns>								
        </member>
        <member name="M:WebServiceProxy.ExecuteNoQuery(System.String,System.Object[])">
            <summary>							
            执行代理类指定方法，无返回值								
            </summary>								
            <param	name="methodName">方法名称</param>							
            <param	name="param">参数</param>							
        </member>
        <member name="M:WebServiceProxy.initTypeName">
            <summary>								
            得到代理类类型名称								
            </summary>								
        </member>
        <member name="M:WebServiceProxy.checkForImports(System.String,System.Web.Services.Description.ServiceDescriptionImporter)">
            <summary>						
            根据web	service文档架构向代理类添加ServiceDescription和XmlSchema							
            </summary>								
            <param	name="baseWSDLUrl">web服务地址</param>							
            <param	name="importer">代理类</param>							
        </member>
        <member name="M:WebServiceProxy.copyTempAssembly(System.String)">
            <summary>							
            复制程序集到指定路径								
            </summary>								
            <param	name="pathToAssembly">程序集路径</param>							
        </member>
        <member name="M:WebServiceProxy.checkCache">
            <summary>							
            是否已经存在该程序集								
            </summary>								
            <returns>false:不存在该程序集,true:已经存在该程序集</returns>								
        </member>
        <member name="M:WebServiceProxy.wsTest">
            <summary>
             动态webservice调用
            </summary>
            <returns>string</returns>  
        </member>
        <member name="P:WebServiceProxy.Instance">
            <summary>					
            代理类的实例							
            </summary>							
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.HisCallCustomInterfaceManager">
            <summary>
            自定义接口管理器
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCallCustomInterfaceManager.HisCallTrade(System.String,System.String@,log4net.ILog,System.String,System.Reflection.MethodBase,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            HisCallTrade
            </summary>
            <param name="adapterTrace"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="terminalIp"></param>
            <param name="method"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCallCustomInterfaceManager.XMLHisResult(System.String,System.Object,System.Object,System.String@,log4net.ILog,System.String)">
            <summary>
            XMLHisResult
            </summary>
            <param name="adapterTrace"></param>
            <param name="retVal"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="tradeCodeMsg"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCallCustomInterfaceManager.HisCallResult(System.String,System.Object,System.String@,log4net.ILog,System.String)">
            <summary>
            HisCallResult
            </summary>
            <param name="adapterTrace"></param>
            <param name="retVal"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="tradeCodeMsg"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCallCustomInterfaceManager.CreateInXml(System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@)">
            <summary>
            组织输入报文【需要根据接口规范自定义】
            </summary>
            <param name="xmldoc">Xml文档</param>
            <param name="methodName">适配器方法名称</param>
            <param name="systemParams">WebUI传入参数集合</param>
            <param name="customParams">Adapter中自定义参数集合</param>
            <param name="callMethodName">【输出参数】：返回在Adapter.XXX.xml文件中对应的被调用方法名称</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.HisCallCustomInterfaceManager.AnalyzeOutXmlToDictionary(System.String,System.String)">
            <summary>
            解析输出的报文【字典方式输出】
            </summary>
            <param name="outXml">需要解析的报文</param>
            <param name="root">根节点值</param>
            <returns>返回的各节点值</returns>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.AdapterBankCall">
            <summary>
            Bank适配器
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBankCall.AdapterBankCallTest(System.String@,System.String,System.String)">
            <summary>
            测试接口
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.AdapterHisCall">
            <summary>
            Bank适配器
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHisCall.AdapterHisCallTest(System.String@,System.String,System.String)">
            <summary>
            测试接口
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank">
            <summary>
            Bank适配器
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.AdapterBankTest(System.String@,System.String,System.String,System.String)">
            <summary>
            测试接口
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.Signin(System.String@,System.String,System.String,System.String)">
            <summary>
            B001银行签到
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.Bind(System.String@,System.String,System.String,System.String)">
            <summary>
            B002绑定
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.Unbind(System.String@,System.String,System.String,System.String)">
            <summary>
            B003解绑
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.Recharge(System.String@,System.String,System.String,System.String)">
            <summary>
            B004充值（银行卡转账到诊疗卡）
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.RechargeReverse(System.String@,System.String,System.String,System.String)">
            <summary>
            B005充值冲正（转账诊疗卡失败时） 
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.Refund(System.String@,System.String,System.String,System.String)">
            <summary>
            B006退款（诊疗卡转账银行卡）
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.QueryOriginalTradeRecord(System.String@,System.String,System.String,System.String)">
            <summary>
            B007查询原交易信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.QueryBankCardAccountInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            B008查询银行卡账户信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.BankBalance(System.String@,System.String,System.String,System.String)">
            <summary>
            B009查询余额
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.CheckBankPwd(System.String@,System.String,System.String,System.String)">
            <summary>
            B010验证银行卡密码
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterBank.BankCardClassDownload(System.String@,System.String,System.String,System.String)">
            <summary>
            B011卡表下载
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="T:SqlHelperParameterCache">
             <summary>
            SqlHelperParameterCache 的摘要说明
             </summary>
        </member>
        <member name="M:SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.BankCustomInterfaceManager">
            <summary>
            自定义接口管理器
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BankCustomInterfaceManager.BankTrade(System.String,System.String@,log4net.ILog,System.String,System.Reflection.MethodBase,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            BankTrade
            </summary>
            <param name="adapterTrace"></param>
            <param name="resultCodeMsg"></param>
            <param name="log"></param>
            <param name="terminalIp"></param>
            <param name="method"></param>
            <param name="systemParams"></param>
            <param name="customParams"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BankCustomInterfaceManager.CreateInXml(System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Boolean@)">
            <summary>
            组织输入报文【需要根据接口规范自定义】
            </summary>
            <param name="xmldoc">Xml文档</param>
            <param name="methodName">适配器方法名称</param>
            <param name="systemParams">WebUI传入参数集合</param>
            <param name="customParams">Adapter中自定义参数集合</param>
            <param name="callMethodName">【输出参数】：返回在Adapter.XXX.xml文件中对应的被调用方法名称</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.BankCustomInterfaceManager.AnalyzeOutXmlToArray(System.String,System.String)">
            <summary>
            解析输出的报文【数组方式输出】
            </summary>
            <param name="outXml">需要解析的报文</param>
            <param name="root">根节点值</param>
            <returns>返回的各节点值</returns>
        </member>
        <member name="T:XMLHelper">
            <summary>
             XMLHelper XML文档操作管理器
            </summary>
        </member>
        <member name="M:XMLHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XMLHelper.GetXmlNodeByXpath(System.String,System.String)">
            <summary>
             选择匹配XPath表达式的第一个节点XmlNode.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNode</returns>
        </member>
        <member name="M:XMLHelper.GetXmlNodeListByXpath(System.String,System.String)">
            <summary>
             选择匹配XPath表达式的节点列表XmlNodeList.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNodeList</returns>
        </member>
        <member name="M:XMLHelper.GetXmlAttribute(System.String,System.String,System.String)">
            <summary>
             选择匹配XPath表达式的第一个节点的匹配xmlAttributeName的属性XmlAttribute.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <returns>返回xmlAttributeName</returns>
        </member>
        <member name="M:XMLHelper.CreateXmlDocument(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             创建一个XML文档
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="rootNodeName">XML文档根节点名称(须指定一个根节点名称)</param>
            <param name="version">XML文档版本号(必须为:"1.0")</param>
            <param name="encoding">XML文档编码方式</param>
            <param name="standalone">该值必须是"yes"或"no",如果为null,Save方法不在XML声明上写出独立属性</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XMLHelper.CreateXmlNodeByXPath(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             依据匹配XPath表达式的第一个节点来创建它的子节点(如果此节点已存在则追加一个新的同名节点
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XMLHelper.CreateOrUpdateXmlNodeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
             依据匹配XPath表达式的第一个节点来创建或更新它的子节点(如果节点存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XMLHelper.CreateOrUpdateXmlAttributeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
             依据匹配XPath表达式的第一个节点来创建或更新它的属性(如果属性存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XMLHelper.DeleteXmlNodeByXPath(System.String,System.String)">
            <summary>
             删除匹配XPath表达式的第一个节点(节点中的子元素同时会被删除)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XMLHelper.DeleteXmlAttributeByXPath(System.String,System.String,System.String)">
            <summary>
             删除匹配XPath表达式的第一个节点中的匹配参数xmlAttributeName的属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要删除的xmlAttributeName的属性名称</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XMLHelper.DeleteAllXmlAttributeByXPath(System.String,System.String)">
            <summary>
             删除匹配XPath表达式的第一个节点中的所有属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XMLHelper.GetDataTable(System.String,System.String)">
            <summary>
            XML转换给DataTable
            </summary>
            <param name="xmlFileName"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetXml(System.Data.DataTable)">
            <summary>
            获取DataTable转化XML
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetXml(System.String,System.String,System.String[])">
            <summary>
            组织XML
            </summary>
            <param name="root">根结点</param>
            <param name="tags">标签列表 ,隔开</param>
            <param name="values">内容</param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetXml(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            组织XML
            </summary>
            <param name="root">根结点</param>
            <param name="args">内容</param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetValueFromXML(System.String,System.String)">
            <summary>
            取XML中path处InnerXml
            </summary>
            <param name="strXml">XML字符串</param>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetObjctArrayFromXML(System.String,System.String)">
            <summary>
            取XML中path处子节点InnerXml，转为object[]
            </summary>
            <param name="strXml"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetObjctArrayFromXML(System.Xml.XmlDocument,System.String)">
            <summary>
            取XML中path处子节点InnerXml，转为object[]
            </summary>
            <param name="strXml"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetDataRowFromXML(System.String,System.String)">
            <summary>
            取XML中path处数据，转为DataTable
            表名为Path最后一层标签名
            无行标签，仅限一行
            </summary>
            <param name="strXml"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetDataTableFromXML(System.String,System.String)">
            <summary>
            取XML中path处数据，并转为DataTable
            有行标签，支持多行
            </summary>
            <param name="strXml"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetDataTableFromXML(System.String,System.String,System.Int32)">
            <summary>
            取XML中path处数据，并转为DataTable
            有行标签，支持多行,可去标题行
            </summary>
            <param name="strXml"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XMLHelper.GetDataTableFromXML(System.String,System.String,System.String)">
            <summary>
            取XML中path处数据，并转为DataTable
            有行标签，支持多行
            和行名相同的节点转为行，其他节点放弃
            </summary>
            <param name="strXml"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:BaseEntity">
            <summary>
            Entity层服务类祖先
            add by Vincent.Q 10.04.12
            只生成包含数据的insert,update,delete语句,其他事件一概不管 modify by Vincent.Q 10.05.23
            只保留Db表的字段信息,与后台Db是何种数据库无关 modify by Vincent.Q 10.09.18
            增加收集实体属性数据类型方法 modify by Vincent.Q 10.10.08
            </summary>
        </member>
        <member name="M:BaseEntity.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BaseEntity.GetPropertyName">
            <summary>
            获取属性名称列表
            add by Vincent.Q 10.04.13
            过滤不是DbTable.Column的属性名称 modify by Vincent.Q 10.10.08
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.GetPropertyValue(System.String)">
            <summary>
            获取实体属性值,根据属性名称
            add by Vincent.Q 10.12.30
            </summary>
            <param name="as_propertyname"></param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.SetPropertyValue(System.String,System.Object)">
            <summary>
            设置实体属性值,根据属性名称
            add by Vincent.Q 10.12.30
            </summary>
            <param name="as_propertyname"></param>
            <param name="aobj_propertyvalue"></param>
        </member>
        <member name="M:BaseEntity.CollectPropertyValueToDictionary">
            <summary>
            收集实体属性值,生成Dictionary对象
            add by Vincent.Q 10.04.13
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.CollectPropertyDataTypeToDictionary">
            <summary>
            收集实体属性数据类型,生成Dictionary对象
            add by Vincent.Q 10.10.08
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.SetPropertyValueByDataRow(System.Data.DataRow)">
            <summary>
            填充实体类属性值,根据DataRow对象
            add by Vincent.Q 10.04.13
            </summary>
            <param name="atable_data"></param>
        </member>
        <member name="M:BaseEntity.SetPropertyValueByDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            填充实体类属性值,根据Dictionary对象
            add by Vincent.Q 10.04.13
            </summary>
            <param name="adic_propertyvalue"></param>
        </member>
        <member name="P:BaseEntity.DbTableName">
            <summary>
            Db表名称
            </summary>
        </member>
        <member name="P:BaseEntity.DbColumnNameList">
            <summary>
            Sql语句栏目名称列表
            </summary>
        </member>
        <member name="T:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis">
            <summary>
            His适配器
            </summary>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.AdapterHisTest(System.String@,System.String,System.String,System.String)">
            <summary>
            接口调用测试（仅作调用测试，代码不必修改）
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.NetTest(System.String@,System.String,System.String,System.String)">
            <summary>
            1)	H000测试
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.CheckPatientByIdCardNo(System.String@,System.String,System.String,System.String)">
            <summary>
            H001判断病人是否已经办卡
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.CreateCard(System.String@,System.String,System.String,System.String)">
            <summary>
            H002建卡/激活
            </summary>
            <param name="resultCodeMsg">返回消息</param>
            <param name="terminalIp">终端IP</param>
            <param name="systemParamsXml">参数键值对</param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPatientInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H003获取门诊病人信息
            </summary>
            <param name="resultCodeMsg"></param>·
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.RevocationCard(System.String@,System.String,System.String,System.String)">
            <summary>
            H004注销卡
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.SupplementaryCard(System.String@,System.String,System.String,System.String)">
            <summary>
            H005补卡
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.ChangeCardPassword(System.String@,System.String,System.String,System.String)">
            <summary>
            H006修改卡密码
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.MakeUpCardInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H007补录卡信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetReservePatientCardNo(System.String@,System.String,System.String,System.String)">
            <summary>
            H008获取预留就诊卡号（银行端申请就诊卡）
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.PatientCardRecharge(System.String@,System.String,System.String,System.String)">
            <summary>
            H101就诊卡充值
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPatientCardRefundBalance(System.String@,System.String,System.String,System.String)">
            <summary>
            H102获取就诊卡在自助机可退款金额
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.PatientCardRefund(System.String@,System.String,System.String,System.String)">
            <summary>
            H103就诊卡退款（转账银行卡）
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.PatientCardRefundReverse(System.String@,System.String,System.String,System.String)">
            <summary>
            H104就诊卡退款冲正（转账银行卡失败时冲正）
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPatientCardTradeRecord(System.String@,System.String,System.String,System.String)">
            <summary>
            H105查询就诊卡交易明细记录
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPatientCardOriginalTradeRecord(System.String@,System.String,System.String,System.String)">
            <summary>
            H106查询就诊卡单笔原交易明细记录（验证His是否到账）
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetTerminalTradeRecord(System.String@,System.String,System.String,System.String)">
            <summary>
            H107查询自助机交易明细记录
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetTerminalTradeRecordSummary(System.String@,System.String,System.String,System.String)">
            <summary>
            H108自助机交易记录汇总查询
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetRealTimeDepartmentSchedule(System.String@,System.String,System.String,System.String)">
            <summary>
            H201获取当日实时科室排班表
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="TradeDetailId"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetRealTimeDoctorSchedule(System.String@,System.String,System.String,System.String)">
            <summary>
            H202获取当日实时医生排班表
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.RealTimeRegister(System.String@,System.String,System.String,System.String)">
            <summary>
            H203挂号
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetRegisterInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H204获取挂号信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.BackNumber(System.String@,System.String,System.String,System.String)">
            <summary>
            H205退号
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetReservationDepartmentSchedule(System.String@,System.String,System.String,System.String)">
            <summary>
            H301获取预约科室排班表
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetReservationDoctorSchedule(System.String@,System.String,System.String,System.String)">
            <summary>
            H302获取预约医生排班表
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.ReservationRegister(System.String@,System.String,System.String,System.String)">
            <summary>
            H303预约挂号
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetReservationList(System.String@,System.String,System.String,System.String)">
            <summary>
            H304获取预约信息列表
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.ReservationRegisterConfirm(System.String@,System.String,System.String,System.String)">
            <summary>
            H305预约信息确认
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.ReservationRegisterCancel(System.String@,System.String,System.String,System.String)">
            <summary>
            H306预约信息取消
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPrescriptionList(System.String@,System.String,System.String,System.String)">
            <summary>
            H401获取需要缴费的处方列表
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPrescriptionInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H402获取需要缴费的处方信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.PayConfirm(System.String@,System.String,System.String,System.String)">
            <summary>
            H403缴费
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPatientCardFeesDetail(System.String@,System.String,System.String,System.String)">
            <summary>
            H404获取就诊卡费用明细
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetHospitalInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H501医院简介
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetDepartmentInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H502科室简介
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetExpertInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H503专家简介
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetDrugType(System.String@,System.String,System.String,System.String)">
            <summary>
            H504查询药品类别
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetDrugInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H505查询药品信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetDrugYbbl(System.String@,System.String,System.String,System.String)">
            <summary>
            H509查询药品医保比例
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetMedicalServicesType(System.String@,System.String,System.String,System.String)">
            <summary>
            H506查询诊疗服务项目类别
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetMedicalServicesInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H507查询诊疗服务项目信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetPayedList(System.String@,System.String,System.String,System.String)">
            <summary>
            H508查询消费明细
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="TradeDetailId"></param>
            <param name="systemParamXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetWindowOrder(System.String@,System.String,System.String,System.String)">
            <summary>
            H509查询发药窗口
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetReportList(System.String@,System.String,System.String,System.String)">
            <summary>
            H601获取检验单列表
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetReportItems(System.String@,System.String,System.String,System.String)">
            <summary>
            H602获取检验单项目结果
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.UpdateReportPrintState(System.String@,System.String,System.String,System.String)">
            <summary>
            H603更新检验单打印状态
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetDocSignature(System.String@,System.String,System.String,System.String)">
            <summary>
            H604获取医生签名
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetReportImage(System.String@,System.String,System.String,System.String)">
            <summary>
            H605获取检验单图像
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetBindingInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H701查询绑定信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.PatientCardBind(System.String@,System.String,System.String,System.String)">
            <summary>
            H702就诊卡银行卡绑定
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.PatientCardUnBind(System.String@,System.String,System.String,System.String)">
            <summary>
            H703就诊卡银行卡解绑
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetInPatientInfo(System.String@,System.String,System.String,System.String)">
            <summary>
            H801获取住院病人信息
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetInPatientInHospitalFeesDetail(System.String@,System.String,System.String,System.String)">
            <summary>
            H802获取在院病人费用明细
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetInPatientDischargedFeesDetail(System.String@,System.String,System.String,System.String)">
            <summary>
            H803获取出院病人费用明细
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.InPatientRecharge(System.String@,System.String,System.String,System.String)">
            <summary>
            H804住院预交金充值
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="M:InspurSelfService.BankHospitalFramework.Adapter.AdapterHis.GetInPatientTradeRecord(System.String@,System.String,System.String,System.String)">
            <summary>
            H805获取住院账户缴费明细
            </summary>
            <param name="resultCodeMsg"></param>
            <param name="terminalIp"></param>
            <param name="systemParamsXml"></param>
            <returns></returns>
        </member>
        <member name="T:AccessAssemblyInfo">
            <summary>
            程序集属性访问类
            </summary>
        </member>
        <member name="M:AccessAssemblyInfo.#ctor">
            <summary>
            访问程序集信息
            </summary>
        </member>
        <member name="T:AssemblyInfo`1">
            <summary>
            程序集类集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AssemblyInfo`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.AssemblyFullName">
            <summary>
            程序集全名
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.CodeBase">
            <summary>
            代码库
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Copyright">
            <summary>
            版权
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Configration">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.TradeMark">
            <summary>
            商标
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Culture">
            <summary>
            文化
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Product">
            <summary>
            产品
            </summary>
        </member>
        <member name="P:AssemblyInfo`1.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="T:OracleHelper">
             <summary>
            OracleHelper 的摘要说明
             </summary>
        </member>
        <member name="M:OracleHelper.AttachParameters(Oracle.DataAccess.Client.OracleCommand,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            将SqlParameters参数数组（参数值）分配给OracleCommand命令
            这个方法将给任何一个参数分配DBNull.Value
            该操作将阻止默认值的使用（大爷的，没看懂）
            </summary>
            <param name="command">要分配SqlParameters参数的OracleCommand命令</param>
            <param name="commandParameters">SqlParameters参数数组</param>
        </member>
        <member name="M:OracleHelper.AssignParameterValues(Oracle.DataAccess.Client.OracleParameter[],System.Data.DataRow)">
            <summary>
            将DataRow类型的列值分配到OracleParameter参数数组
            </summary>
            <param name="commandParameters">要分配的OracleParameter参数数组</param>
            <param name="dataRow">将要分配给存储过程参数的DataRow</param>
        </member>
        <member name="M:OracleHelper.AssignParameterValues(Oracle.DataAccess.Client.OracleParameter[],System.Object[])">
            <summary>
            将一个对象数组分配给OracleParameter参数数组.（重载方法）
            </summary>
            <param name="commandParameters">要分配的OracleParameter参数数组</param>
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param>
        </member>
        <member name="M:OracleHelper.PrepareCommand(Oracle.DataAccess.Client.OracleCommand,Oracle.DataAccess.Client.OracleConnection,Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[],System.Boolean@)">
            <summary>
            预处理用户提供的命令,数据库连接/事务/命令类型/参数
            </summary>
            <param name="command">要处理的OracleCommand</param>
            <param name="connection">有效的数据库连接</param>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名或都T-SQL命令文本</param>
            <param name="commandParameters">和命令相关联的OracleParameter参数数组,如果没有参数为'null'</param>
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,类型的OracleCommand.
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定连接字符串,类型的OracleCommand.如果没有提供参数,不返回结果
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">OracleParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            执行指定连接字符串的存储过程,将对象数组的值赋给存储过程参数.
            此方法需要在参数缓存方法中探索参数并生成参数.
            </summary>
            <remarks>
            这个方法没有提供访问输出参数和返回值.
            示例:  
            int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配到存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令. 
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(Oracle.DataAccess.Client.OracleConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
            int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行带事务的OracleCommand. 
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">一个有效的事物</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行带事务的OracleCommand(指定参数).
            </summary>
            <remarks>
            示例:  
            int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的数据库事物</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQuery(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Object[])">
            <summary>
            执行带事务的OracleCommand(指定参数值).
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
            int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamters参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例:  
            DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet. 
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
            DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(Oracle.DataAccess.Client.OracleConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.: 
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例: 
            DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例: 
            DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDataset(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.: 
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(Oracle.DataAccess.Client.OracleConnection,Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[],OracleHelper.SqlConnectionOwnership)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            如果是OracleHelper打开连接,当连接关闭DataReader也将关闭.
            如果是调用都打开连接,DataReader由调用都管理.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的事务,或者为 'null'</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param>
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由OracleHelper提供</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例: 
            OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: 
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组(new OracleParameter("@prodid", 24))</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            OracleDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            示例: 
            OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: 
            OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(Oracle.DataAccess.Client.OracleConnection,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            OracleDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">T存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            示例: 
            OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: 
             OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReader(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            OracleDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(Oracle.DataAccess.Client.OracleConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: 
            int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalar(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Object[])">
            <summary>
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReader(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的OracleCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReader(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接对象的OracleCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReader(Oracle.DataAccess.Client.OracleConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的OracleCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称 using "FOR XML AUTO"</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReader(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的OracleCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReader(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库事务的OracleCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例: 
            XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReader(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Object[])">
            <summary>
            执行指定数据库事务的OracleCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:OracleHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例: 
            FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)</param>
        </member>
        <member name="M:OracleHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数.
            </summary>
            <remarks>
            示例: 
            FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">分配给命令的SqlParamter参数数组</param>
            <param name="tableNames">要填充结果集的DataSet实例</param>
            <param name="commandParameters">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:OracleHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>   
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:OracleHelper.FillDataset(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例: 
            FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>   
        </member>
        <member name="M:OracleHelper.FillDataset(Oracle.DataAccess.Client.OracleConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例: 
            FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:OracleHelper.FillDataset(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:OracleHelper.FillDataset(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例: 
            FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:OracleHelper.FillDataset(Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例: 
            FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:OracleHelper.FillDataset(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例: 
            FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:OracleHelper.FillDataset(Oracle.DataAccess.Client.OracleConnection,Oracle.DataAccess.Client.OracleTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters.
            </summary>
            <remarks>
            示例: 
            FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:OracleHelper.UpdateDataset(Oracle.DataAccess.Client.OracleCommand,Oracle.DataAccess.Client.OracleCommand,Oracle.DataAccess.Client.OracleCommand,System.Data.DataSet,System.String)">
            <summary>
            执行数据集更新到数据库,指定inserted, updated, or deleted命令.
            </summary>
            <remarks>
            示例: 
            UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param>
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param>
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param>
            <param name="dataSet">要更新到数据库的DataSet</param>
            <param name="tableName">要更新到数据库的DataTable</param>
        </member>
        <member name="M:OracleHelper.CreateCommand(Oracle.DataAccess.Client.OracleConnection,System.String,System.String[])">
            <summary>
            创建OracleCommand命令,指定数据库连接对象,存储过程名和参数.
            </summary>
            <remarks>
            示例: 
             OracleCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="sourceColumns">源表的列名称数组</param>
            <returns>返回OracleCommand命令</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQueryTypedParams(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteNonQueryTypedParams(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDatasetTypedParams(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteDatasetTypedParams(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReaderTypedParams(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteReaderTypedParams(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的OracleDataReader</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalarTypedParams(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteScalarTypedParams(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReaderTypedParams(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:OracleHelper.ExecuteXmlReaderTypedParams(Oracle.DataAccess.Client.OracleTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="T:OracleHelper.SqlConnectionOwnership">
            <summary>
            枚举,标识数据库连接是由OracleHelper提供还是由调用者提供
            </summary>
        </member>
        <member name="F:OracleHelper.SqlConnectionOwnership.Internal">
            <summary>由OracleHelper提供连接</summary>
        </member>
        <member name="F:OracleHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary>
        </member>
    </members>
</doc>
